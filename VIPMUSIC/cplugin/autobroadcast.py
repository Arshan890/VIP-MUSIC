import asyncio
import datetime
from pyrogram import Client
from config import START_IMG_URL, AUTO_GCAST_MSG, AUTO_GCAST, LOGGER_ID
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from typing import Dict, List, Union

from VIPMUSIC import userbot
from VIPMUSIC.core.mongo import mongodb, pymongodb

authdb = mongodb.adminauth
authuserdb = mongodb.authuser
autoenddb = mongodb.autoend
assdb = mongodb.assistants
blacklist_chatdb = mongodb.blacklistChat
blockeddb = mongodb.blockedusers
chatsdb = mongodb.chats
channeldb = mongodb.cplaymode
clonebotdb = pymongodb.clonebotdb
countdb = mongodb.upcount
gbansdb = mongodb.gban
langdb = mongodb.language
onoffdb = mongodb.onoffper
playmodedb = mongodb.playmode
playtypedb = mongodb.playtypedb
skipdb = mongodb.skipmode
sudoersdb = mongodb.sudoers
usersdb = mongodb.tgusersdb
privatedb = mongodb.privatechats
suggdb = mongodb.suggestion
cleandb = mongodb.cleanmode
queriesdb = mongodb.queries
userdb = mongodb.userstats
videodb = mongodb.vipvideocalls

# Shifting to memory [mongo sucks often]
active = []
activevideo = []
assistantdict = {}
autoend = {}
count = {}
channelconnect = {}
langm = {}
loop = {}
maintenance = []
nonadmin = {}
pause = {}
playmode = {}
playtype = {}
skipmode = {}
privatechats = {}
cleanmode = []
suggestion = {}
mute = {}
audio = {}
video = {}


async def is_served_user(user_id: int) -> bool:
    user = await usersdb.find_one({"user_id": user_id})
    if not user:
        return False
    return True


async def get_served_users() -> list:
    users_list = []
    async for user in usersdb.find({"user_id": {"$gt": 0}}):
        users_list.append(user)
    return users_list


async def add_served_user(user_id: int):
    is_served = await is_served_user(user_id)
    if is_served:
        return
    return await usersdb.insert_one({"user_id": user_id})


async def get_served_chats() -> list:
    chats_list = []
    async for chat in chatsdb.find({"chat_id": {"$lt": 0}}):
        chats_list.append(chat)
    return chats_list


async def is_served_chat(chat_id: int) -> bool:
    chat = await chatsdb.find_one({"chat_id": chat_id})
    if not chat:
        return False
    return True


async def add_served_chat(chat_id: int):
    is_served = await is_served_chat(chat_id)
    if is_served:
        return
    return await chatsdb.insert_one({"chat_id": chat_id})


async def delete_served_chat(chat_id: int):
    await chatsdb.delete_one({"chat_id": chat_id})


AUTO_GCASTS = f"{AUTO_GCAST}" if AUTO_GCAST else False

START_IMG_URLS = "https://graph.org/file/760169f7f8dd536c50793.jpg"

MESSAGES = f"""**„Ö§„Ö§„Ö§‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüì°

‚ù§Ô∏è‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡•à‡§∏‡§æ ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ Platform ‡§™‡•Ç‡§∞‡•Ä ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•ã¬†‡§π‡§ø‡§≤‡§æ ‡§ï‡•á ‡§∞‡§ñ ‡§¶‡§ø‡§Ø‡§æ MISS ‡§Æ‡§§ ‡§ï‡§∞‡§®‡§æ‚≠êÔ∏è

‚úÖGame¬† ‡§ï‡•ã INVITE ‡§ï‡§∞‡•ã ‡§î‡§∞ 10,000‚Çπ ‡§∏‡•á 50,000‚Çπ ‡§∞‡•ã‡§ú ‡§ï‡§Æ‡§æ‡§ì

ü´ÇLink:- https://91club.game/#/register?invitationCode=65847105926 ‚úÖ

Agent: @Jamesadmin91clubüíô**"""


BUTTONS = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(
                "‡πè Click & Get ‚Çπ100 ‡πè",
                url=f"https://91club.game/#/register?invitationCode=65847105926",
            )
        ]
    ]
)

MESSAGE = f"""**‡πè ·¥õ ú…™s …™s ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥òs + ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥†·¥Ñ. üíå

üéß ·¥ò ü·¥Ä è + ·¥†·¥ò ü·¥Ä è + ·¥Ñ·¥ò ü·¥Ä è üéß

‚û• s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á -  ü·¥á“ì·¥õ …¥·¥è·¥õ…™·¥Ñ·¥á, ·¥õ·¥Ä…¢·¥Ä ü ü, ·¥†·¥Ñ·¥õ·¥Ä…¢,  ô·¥Ä…¥ - ·¥ç·¥ú·¥õ·¥á, s ú·¥Ä è Ä…™,  ü·¥ú Ä…™·¥Ñs, s·¥è…¥…¢ - ·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö, ·¥á·¥õ·¥Ñ... ‚ù§Ô∏è

üîê·¥úÍú±·¥á ¬ª [/start](https://t.me/TG_VC_BOT?start=help) ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ

‚û≤  ô·¥è·¥õ :** @TG_VC_BOT"""

BUTTON = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(
                "‡πè ·¥ã…™·¥Ö…¥·¥Ä·¥ò ·¥ç·¥á ‡πè",
                url=f"https://t.me/TG_VC_BOT?startgroup=s&admin=delete_messages+manage_video_chats+pin_messages+invite_users",
            )
        ]
    ]
)

caption = f"""{AUTO_GCAST_MSG}""" if AUTO_GCAST_MSG else MESSAGES

TEXT = """**·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥è ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ/ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™s ·¥Ö·¥è…™…¥ …™…¥ ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥è·¥ús ü è. **\n**…™·¥õ ·¥Ñ·¥Ä…¥  ô·¥á s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö  ô è ·¥ò·¥ú·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á [·¥Ä·¥ú·¥õ·¥è_…¢·¥Ñ·¥Äs·¥õ = (·¥ã·¥á·¥á·¥ò  ô ü·¥Ä…¥·¥ã & ·¥Ö·¥è…¥·¥õ ·¥° Ä…™·¥õ·¥á ·¥Ä…¥ è·¥õ ú…™…¥…¢)]**"""


async def send_message_to_chats(client: Client):
    try:
        chats = await get_served_chats()

        for chat_info in chats:
            chat_id = chat_info.get("chat_id")
            if isinstance(chat_id, int):  # Check if chat_id is an integer
                try:
                    await client.send_photo(
                        chat_id,
                        photo=START_IMG_URLS,
                        caption=caption,
                        reply_markup=BUTTONS,
                    )
                    await asyncio.sleep(
                        20
                    )  # Sleep for 100 second between sending messages
                except Exception as e:
                    pass  # Do nothing if an error occurs while sending message
    except Exception as e:
        pass  # Do nothing if an error occurs while fetching served chats


async def continuous_broadcast():
    # Send TEXT once when bot starts

    while True:
        if AUTO_GCAST:
            try:
                await send_message_to_chats(client)
            except Exception as e:
                pass

        # Wait for 100000 seconds before next broadcast
        await asyncio.sleep(100000)


# Start the continuous broadcast loop if AUTO_GCAST is True
if AUTO_GCAST:
    asyncio.create_task(continuous_broadcast())
